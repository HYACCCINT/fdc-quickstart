# Movies
type Movie
  @table(name: "Movies", singular: "movie", plural: "movies", key: ["id"]) {
  id: UUID! @col(name: "movie_id") @default(expr: "uuidV4()")
  title: String!
  imageUrl: String! @col(name: "image_url")
  releaseYear: Int @col(name: "release_year")
  genre: String
  rating: Float @col(name: "rating") 
  description: String @col(name: "description")
  tags: [String] @col(name: "tags")
  # Vectors
  descriptionEmbedding: Vector @col(size:768) # vector
}

# Movie Metadata
# Movie - MovieMetadata is a one-to-one relationship
type MovieMetadata
  @table(
    name: "MovieMetadata"
  ) {
  # @ref creates a field in the current table (MovieMetadata) that holds the primary key of the referenced type
  # In this case, @ref(fields: "id") is implied
  movie: Movie! @ref
  # movieId: UUID <- this is created by the above @ref
  director: String @col(name: "director")
  # TODO: optional other fields
}

# Actors
# Suppose an actor can participate in multiple movies and movies can have multiple actors
# Movie - Actors (or vice versa) is a many to many relationship
type Actor @table(name: "Actors", singular: "actor", plural: "actors") {
  id: UUID! @col(name: "actor_id") @default(expr: "uuidV4()")
  imageUrl: String! @col(name: "image_url")
  name: String! @col(name: "name", dataType: "varchar(30)")
  biography: String @col(name: "biography")
}

# Join table for many-to-many relationship for movies and actors
# The 'key' param signifies the primary key(s) of this table
# In this case, the keys are [movieId, actorId], the generated fields of the reference types [movie, actor]
type MovieActor @table(key: ["movie", "actor"]) {
  # @ref creates a field in the current table (MovieActor) that holds the primary key of the referenced type
  # In this case, @ref(fields: "id") is implied
  movie: Movie! @ref
  # movieId: UUID! <- this is created by the above @ref, see: implicit.gql

  actor: Actor! @ref
  # actorId: UUID! <- this is created by the above @ref, see: implicit.gql

  role: String! @col(name: "role") # "main" or "supporting"
  # TODO: optional other fields
}

# Users
# Suppose a user can leave reviews for movies
# user:reviews is a one to many relationship, movie:reviews is a one to many relationship, movie:user is a many to many relationship
type User
  @table(name: "Users", singular: "user", plural: "users", key: ["id"]) {
  # id: UUID! @col(name: "user_id") @default(expr: "uuidV4()")
  id: String! @col(name: "user_auth")
  username: String! @col(name: "username", dataType: "varchar(50)")
  # The following are generated from the @ref in the Review table
  # reviews_on_user 
  # movies_via_Review
}

# Join table for many-to-many relationship for users and favorite movies
type FavoriteMovie
  @table(name: "FavoriteMovies", key: ["user", "movie"]) {
  user: User! @ref
  movie: Movie! @ref
}

# Join table for many-to-many relationship for users and favorite actors
type FavoriteActor
  @table(name: "FavoriteActors", key: ["user", "actor"]) {
  user: User! @ref
  actor: Actor! @ref
}

# Join table for many-to-many relationship for users and watched movies
type WatchedMovie
  @table(name: "WatchedMovies", key: ["user", "movie"]) {
  user: User! @ref
  movie: Movie! @ref
}

# Reviews
type Review @table(name: "Reviews", key: ["movie", "user"]) {
  id: UUID! @col(name: "review_id") @default(expr: "uuidV4()")
  user: User! @ref
  movie: Movie! @ref
  rating: Int
  reviewText: String
  reviewDate: Date! @default(expr: "request.time")
}

# Self Joins
extend type Movie {
    sequelTo: Movie
}

